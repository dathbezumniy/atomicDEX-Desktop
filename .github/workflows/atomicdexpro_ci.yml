name: AtomicDEX Desktop CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 0 * * 1'

jobs:

  linux-build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name: [
          ubuntu-qt-5-15-0,
          ubuntu-qt-5-15-1
        ]

        include:
          - name: ubuntu-qt-5-15-0
            os: ubuntu-16.04
            qt: '5.15.0'

          - name: ubuntu-qt-5-15-1
            os: ubuntu-16.04
            qt: '5.15.1'


    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'true'

      - name: Install QT (Linux)
        uses: KomodoPlatform/install-qt-action@v2
        with:
          version: ${{ matrix.qt }}
          host: 'linux'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'
          aqtversion: '==0.8'
          py7zrversion: '==0.6'

      - name: Setup Nim (Linux)
        uses: KomodoPlatform/setup-nim-action@v1.0.2
        with:
          nim-version: '1.2.0'

      - name: Install deps (Linux)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo ${{ github.sha }}
          sudo apt-get update  # prevents repo404 errors on apt-remove below
          sudo apt-get remove php* msodbcsql17 mysql*
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get upgrade -y

          # base deps
          sudo apt-get install build-essential \
                               libgl1-mesa-dev \
                               ninja-build \
                               curl \
                               wget \
                               software-properties-common \
                               lsb-release \
                               libpulse-dev \
                               libtool \
                               autoconf \
                               unzip \
                               libssl-dev \
                               libxkbcommon-x11-0 \
                               libxcb-icccm4 \
                               libxcb-image0 \
                               libxcb1-dev \
                               libxcb-keysyms1-dev \
                               libxcb-render-util0-dev \
                               libxcb-xinerama0 \
                               libgstreamer-plugins-base1.0-dev \
                               git -y


          # set clang version
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 777
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 777

          # set gnu compilers version
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 777
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 777

          # get llvm
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 9

          sudo apt-get update
          sudo apt-get install libc++abi-9-dev libc++-9-dev -y

          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-9
          export CC=clang-9

          # get right cmake version
          wget https://github.com/Kitware/CMake/releases/download/v3.17.3/cmake-3.17.3-Linux-x86_64.tar.gz
          tar xvf cmake-3.17.3-Linux-x86_64.tar.gz
          cd cmake-3.17.3-Linux-x86_64
          sudo cp -r * /usr/
          sudo cp -r * /usr/local/
          cmake --version

          # get libwally
          git clone https://github.com/KomodoPlatform/libwally-core.git
          cd libwally-core
          ./tools/autogen.sh
          ./configure --disable-shared
          sudo make -j3 install
          cd ..

      - name: prepare build (Linux)
        run: |
         # duplicating because got suspicion that update-alternatives doesnt save between steps

          # set clang version
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 777
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 777

          # set gnu compilers version
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 777
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 777

      - name: vcpkg deps (Linux)
        env: # Or as an environment variable
          CXXFLAGS: -stdlib=libc++
          LDFLAGS: -stdlib=libc++
          CXX: clang++-9
          CC: clang-9
        uses: KomodoPlatform/run-vcpkg@v3
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/linux_response_file.txt'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/linux_response_file.txt') }}

      - name: build (Linux)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          export PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-9
          export CC=clang-9
          cd ci_tools_atomic_dex
          nimble build -y

          #./ci_tools_atomic_dex --install_dependencies
          ./ci_tools_atomic_dex build release
          ./ci_tools_atomic_dex bundle release


      - name: Running Tests (Linux)
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN_SECRET }}
        working-directory: ci_tools_atomic_dex
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          export PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-9
          export CC=clang-9
          echo "Running tests"
          ./ci_tools_atomic_dex tests release
          cd build-Release/bin/AntaraAtomicDexTestsAppDir/usr/bin
          cat atomic-dex-tests-result.xml
          curl https://report.ci/upload.py --output upload.py
          ls
          python upload.py --sha `git rev-parse HEAD` -n "[Doctest Linux]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"
          echo "Uploading tests on Linux finished"

      - name: Upload bundle artifact (Linux)
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}.tar.gz
          path: ./ci_tools_atomic_dex/bundle-Release/${{ matrix.name }}-AntaraAtomicDexAppDir.tar.gz


  macos-build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name: [
          osx-qt-5-15-0,
          osx-qt-5-15-1
        ]

        include:
          - name: osx-qt-5-15-0
            os: macos-latest
            qt: '5.15.0'
          
          - name: osx-qt-5-15-1
            os: macos-latest
            qt: '5.15.1'


    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'true'

      - name: Cache Qt (Mac)
        id: cache-qt-mac
        uses: actions/cache@v1
        with:
          path: '${{ github.workspace }}/Qt/${{ matrix.qt }}'
          key: ${{ runner.os }}-qt

      - name: Install QT (MacOS)
        if: steps.cache-qt-mac.outputs.cache-hit != 'true'
        uses: KomodoPlatform/install-qt-action@v2
        with:
          version: ${{ matrix.qt }}
          host: 'mac'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Install deps (MacOS)
        run: |
          brew install autoconf \
                       automake \
                       libtool \
                       pkgconfig \
                       wget \
                       nim \
                       cmake \
                       ninja \
                       git \
                       boost \
                       gcc \
                       gnu-sed \
                       llvm@9

          export CC=/usr/local/opt/llvm@9/bin/clang

          # get curl
          git clone https://github.com/curl/curl.git
          cd curl
          git checkout curl-7_70_0
          ./buildconf
          ./configure --disable-shared --enable-static --without-libidn2 --without-ssl --without-nghttp2 --disable-ldap --with-darwinssl
          make -j3 install
          cd ../

          # get libbitcoin
          #git clone --depth 1 --branch version5 --single-branch "https://github.com/libbitcoin/secp256k1"
          #cd secp256k1
          #./autogen.sh
          #./configure --disable-shared --disable-tests --enable-module-recovery
          #make -j3
          #sudo make install
          #cd ../

          #git clone --depth 1 --branch version3 --single-branch https://github.com/KomodoPlatform/libbitcoin-system.git
          #cd libbitcoin-system
          #./autogen.sh
          #./configure --with-boost --disable-shared
          #make -j3
          #sudo make install
          #sudo update_dyld_shared_cache

          git clone https://github.com/KomodoPlatform/libwally-core.git
          cd libwally-core
          ./tools/autogen.sh
          ./configure --disable-shared
          sudo make -j3 install
          cd ..

          # get SDKs 
          git clone https://github.com/phracker/MacOSX-SDKs $HOME/sdk

      - name: vcpkg deps (MacOS)
        env: # Or as an environment variable
          CXX: /usr/local/opt/llvm@9/bin/clang++
          CC: /usr/local/opt/llvm@9/bin/clang
        uses: KomodoPlatform/run-vcpkg@v3
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/osx_response_file.txt'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/osx_response_file.txt') }}

      - name: Build (MacOS)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          cd ci_tools_atomic_dex
          nimble build -y
          ./ci_tools_atomic_dex bundle release --osx_sdk=$HOME/sdk/MacOSX10.13.sdk --compiler=/usr/local/opt/llvm@9/bin/clang++
          ls bundle-Release/atomicDefi.dmg

      - name: Running Tests (MacOS)
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN_SECRET }}
        working-directory: ci_tools_atomic_dex
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          echo "Running tests"
          ./ci_tools_atomic_dex tests release
          cd build-Release/bin/atomicDeFi_tests.app/Contents/MacOS
          cat atomic-dex-tests-result.xml
          curl https://report.ci/upload.py --output upload.py
          ls
          python upload.py --sha `git rev-parse HEAD` -n "[Doctest MacOS]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"
          echo "Uploading tests on OSX finished"


      - name: Upload artifacts (MacOS)
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}.dmg
          path: ./ci_tools_atomic_dex/bundle-Release/${{ matrix.name }}-atomicDefi.dmg



  windows-build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name: [
          windows-10-qt-5-15-0,
          windows-10-qt-5-15-1
        ]

        include:
          - name: windows-10-qt-5-15-0
            os: windows-latest
            qt: '5.15.0'
          
          - name: windows-10-qt-5-15-1
            os: windows-latest
            qt: '5.15.1'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'true'

      - name: Install QT (Win)
        uses: KomodoPlatform/install-qt-action@v2
        with:
          version: ${{ matrix.qt }}
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: 'C:\'
          modules: 'qtcharts qtwidgets debug_info'

      - name: vcpkg deps (Windows)
        uses: KomodoPlatform/run-vcpkg@v3
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/windows_response_file.txt'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/windows_response_file.txt') }}

      - name: Build (Win)
        shell: powershell
        run: |
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install nim --global
          scoop install llvm --global
          scoop install ninja --global
          scoop install cmake --global
          scoop install git --global
          scoop install 7zip  --global

          scoop cache rm 7zip
          scoop cache rm git
          scoop cache rm cmake
          scoop cache rm ninja
          scoop cache rm llvm
          scoop cache rm nim

          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\${{ matrix.qt }}\msvc2019_64"

          cd ci_tools_atomic_dex

          $file = 'src\generate.nim'
          $regex = '(?<=g_vcpkg_cmake_script_path & ")[^"]*'
          (Get-Content $file) -replace $regex, ' -DVCPKG_TARGET_TRIPLET=x64-windows ' | Set-Content $file
          nimble build -y

          # downloading debug dlls because powershell build doesnt put it
          #$SHAORIG = "8B06E02CE77C48D6EE1993E2D532FE0B12650C77B24609BF4003ADE97826E8FE"
          #$DWFILE = ($PWD | select -exp Path) + '\debuglibs-win-dexpro.zip'
          #(New-Object System.Net.WebClient).DownloadFile('https://github.com/KomodoPlatform/depot/releases/download/0.1/debuglibs-win-atomicdexpro.zip', $DWFILE)
          #$SHADW = Get-FileHash -Algorithm SHA256 .\debuglibs-win-dexpro.zip | select -exp Hash
          #if ($SHADW -ne $SHAORIG) {Throw "Wrong hash: $SHADW =! $SHAORIG"}

          #cmd /c '.\ci_tools_atomic_dex.exe --install_dependencies 2>&1'
          cmd /c '.\ci_tools_atomic_dex.exe build release 2>&1'
          #7z e -o'build-release\bin\' .\debuglibs-win-dexpro.zip
          cmd /c '.\ci_tools_atomic_dex.exe bundle release 2>&1'
          ls bundle-Release/bundle.zip

      - name: Running Tests (Windows)
        shell: powershell
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN_SECRET }}
        working-directory: ci_tools_atomic_dex
        run: |
          echo "Running tests"
          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\${{ matrix.qt }}\msvc2019_64"
          cmd /c '.\ci_tools_atomic_dex.exe tests release 2>&1'
          cd build-Release
          cd bin
          ls
          Invoke-WebRequest -Uri https://report.ci/upload.py -OutFile upload.py
          python upload.py --sha $(git rev-parse HEAD) -n "[Doctest Windows]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"

      - name: Upload artifacts (Windows)
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}.zip
          path: ./ci_tools_atomic_dex/bundle-Release/${{ matrix.name }}-bundle.zip
